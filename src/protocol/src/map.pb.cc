// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace framework {

void protobuf_ShutdownFile_map_2eproto() {
  delete ModelInfo::default_instance_;
  delete SpriteInfo::default_instance_;
  delete MapBlock::default_instance_;
  delete BlockInfo::default_instance_;
  delete SeamlessMap::default_instance_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ModelInfo::default_instance_ = new ModelInfo();
  SpriteInfo::default_instance_ = new SpriteInfo();
  MapBlock::default_instance_ = new MapBlock();
  BlockInfo::default_instance_ = new BlockInfo();
  SeamlessMap::default_instance_ = new SeamlessMap();
  ModelInfo::default_instance_->InitAsDefaultInstance();
  SpriteInfo::default_instance_->InitAsDefaultInstance();
  MapBlock::default_instance_->InitAsDefaultInstance();
  BlockInfo::default_instance_->InitAsDefaultInstance();
  SeamlessMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ModelInfo::kModelFileFieldNumber;
const int ModelInfo::kXFieldNumber;
const int ModelInfo::kYFieldNumber;
const int ModelInfo::kOffsetXFieldNumber;
const int ModelInfo::kOffsetYFieldNumber;
const int ModelInfo::kScaleFieldNumber;
const int ModelInfo::kRotationFieldNumber;
#endif  // !_MSC_VER

ModelInfo::ModelInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModelInfo::InitAsDefaultInstance() {
}

ModelInfo::ModelInfo(const ModelInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModelInfo::SharedCtor() {
  _cached_size_ = 0;
  model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  offset_x_ = 0;
  offset_y_ = 0;
  scale_ = 0;
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelInfo::~ModelInfo() {
  SharedDtor();
}

void ModelInfo::SharedDtor() {
  if (model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_;
  }
  if (this != default_instance_) {
  }
}

void ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModelInfo& ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

ModelInfo* ModelInfo::default_instance_ = NULL;

ModelInfo* ModelInfo::New() const {
  return new ModelInfo;
}

void ModelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_file()) {
      if (model_file_ != &::google::protobuf::internal::kEmptyString) {
        model_file_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    offset_x_ = 0;
    offset_y_ = 0;
    scale_ = 0;
    rotation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offset_x;
        break;
      }
      
      // required float offset_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offset_y;
        break;
      }
      
      // required float offset_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scale;
        break;
      }
      
      // required float scale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_rotation;
        break;
      }
      
      // required float rotation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string model_file = 1;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_file(), output);
  }
  
  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // required float offset_x = 4;
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset_x(), output);
  }
  
  // required float offset_y = 5;
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset_y(), output);
  }
  
  // required float scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
  }
  
  // required float rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rotation(), output);
  }
  
}

int ModelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string model_file = 1;
    if (has_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file());
    }
    
    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float offset_x = 4;
    if (has_offset_x()) {
      total_size += 1 + 4;
    }
    
    // required float offset_y = 5;
    if (has_offset_y()) {
      total_size += 1 + 4;
    }
    
    // required float scale = 6;
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // required float rotation = 7;
    if (has_rotation()) {
      total_size += 1 + 4;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModelInfo*>(&from));
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_file()) {
      set_model_file(from.model_file());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ModelInfo::Swap(ModelInfo* other) {
  if (other != this) {
    std::swap(model_file_, other->model_file_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(offset_x_, other->offset_x_);
    std::swap(offset_y_, other->offset_y_);
    std::swap(scale_, other->scale_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModelInfo::GetTypeName() const {
  return "framework.ModelInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteInfo::kFileFieldNumber;
const int SpriteInfo::kXFieldNumber;
const int SpriteInfo::kYFieldNumber;
const int SpriteInfo::kScaleFieldNumber;
const int SpriteInfo::kRotationFieldNumber;
const int SpriteInfo::kZOrderFieldNumber;
#endif  // !_MSC_VER

SpriteInfo::SpriteInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpriteInfo::InitAsDefaultInstance() {
}

SpriteInfo::SpriteInfo(const SpriteInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpriteInfo::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  scale_ = 0;
  rotation_ = 0;
  z_order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteInfo::~SpriteInfo() {
  SharedDtor();
}

void SpriteInfo::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void SpriteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpriteInfo& SpriteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

SpriteInfo* SpriteInfo::default_instance_ = NULL;

SpriteInfo* SpriteInfo::New() const {
  return new SpriteInfo;
}

void SpriteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    scale_ = 0;
    rotation_ = 0;
    z_order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpriteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale;
        break;
      }
      
      // required float scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotation;
        break;
      }
      
      // required float rotation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_z_order;
        break;
      }
      
      // required int32 z_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_order_)));
          set_has_z_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpriteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // required float scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }
  
  // required float rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }
  
  // required int32 z_order = 6;
  if (has_z_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->z_order(), output);
  }
  
}

int SpriteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float scale = 4;
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // required float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }
    
    // required int32 z_order = 6;
    if (has_z_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z_order());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpriteInfo*>(&from));
}

void SpriteInfo::MergeFrom(const SpriteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_z_order()) {
      set_z_order(from.z_order());
    }
  }
}

void SpriteInfo::CopyFrom(const SpriteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SpriteInfo::Swap(SpriteInfo* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(scale_, other->scale_);
    std::swap(rotation_, other->rotation_);
    std::swap(z_order_, other->z_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpriteInfo::GetTypeName() const {
  return "framework.SpriteInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MapBlock::kNameFieldNumber;
const int MapBlock::kRowFieldNumber;
const int MapBlock::kColFieldNumber;
const int MapBlock::kWidthFieldNumber;
const int MapBlock::kHeightFieldNumber;
const int MapBlock::kMaterialFieldNumber;
const int MapBlock::kGridStatesFieldNumber;
const int MapBlock::kSpritesFieldNumber;
const int MapBlock::kModelsFieldNumber;
#endif  // !_MSC_VER

MapBlock::MapBlock()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapBlock::InitAsDefaultInstance() {
}

MapBlock::MapBlock(const MapBlock& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapBlock::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_ = 0;
  col_ = 0;
  width_ = 0;
  height_ = 0;
  material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapBlock::~MapBlock() {
  SharedDtor();
}

void MapBlock::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (material_ != &::google::protobuf::internal::kEmptyString) {
    delete material_;
  }
  if (this != default_instance_) {
  }
}

void MapBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapBlock& MapBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

MapBlock* MapBlock::default_instance_ = NULL;

MapBlock* MapBlock::New() const {
  return new MapBlock;
}

void MapBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    row_ = 0;
    col_ = 0;
    width_ = 0;
    height_ = 0;
    if (has_material()) {
      if (material_ != &::google::protobuf::internal::kEmptyString) {
        material_->clear();
      }
    }
  }
  grid_states_.Clear();
  sprites_.Clear();
  models_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }
      
      // required int32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_col;
        break;
      }
      
      // required int32 col = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }
      
      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_material;
        break;
      }
      
      // required string material = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grid_states;
        break;
      }
      
      // repeated int32 grid_states = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_grid_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grid_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grid_states;
        if (input->ExpectTag(66)) goto parse_sprites;
        break;
      }
      
      // repeated .framework.SpriteInfo sprites = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sprites;
        if (input->ExpectTag(74)) goto parse_models;
        break;
      }
      
      // repeated .framework.ModelInfo models = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_models:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_models()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_models;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }
  
  // required int32 col = 3;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->col(), output);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }
  
  // required string material = 6;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->material(), output);
  }
  
  // repeated int32 grid_states = 7;
  for (int i = 0; i < this->grid_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->grid_states(i), output);
  }
  
  // repeated .framework.SpriteInfo sprites = 8;
  for (int i = 0; i < this->sprites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->sprites(i), output);
  }
  
  // repeated .framework.ModelInfo models = 9;
  for (int i = 0; i < this->models_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->models(i), output);
  }
  
}

int MapBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }
    
    // required int32 col = 3;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }
    
    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required string material = 6;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->material());
    }
    
  }
  // repeated int32 grid_states = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->grid_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grid_states(i));
    }
    total_size += 1 * this->grid_states_size() + data_size;
  }
  
  // repeated .framework.SpriteInfo sprites = 8;
  total_size += 1 * this->sprites_size();
  for (int i = 0; i < this->sprites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprites(i));
  }
  
  // repeated .framework.ModelInfo models = 9;
  total_size += 1 * this->models_size();
  for (int i = 0; i < this->models_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->models(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapBlock*>(&from));
}

void MapBlock::MergeFrom(const MapBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_states_.MergeFrom(from.grid_states_);
  sprites_.MergeFrom(from.sprites_);
  models_.MergeFrom(from.models_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_material()) {
      set_material(from.material());
    }
  }
}

void MapBlock::CopyFrom(const MapBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < sprites_size(); i++) {
    if (!this->sprites(i).IsInitialized()) return false;
  }
  for (int i = 0; i < models_size(); i++) {
    if (!this->models(i).IsInitialized()) return false;
  }
  return true;
}

void MapBlock::Swap(MapBlock* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(material_, other->material_);
    grid_states_.Swap(&other->grid_states_);
    sprites_.Swap(&other->sprites_);
    models_.Swap(&other->models_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapBlock::GetTypeName() const {
  return "framework.MapBlock";
}


// ===================================================================

#ifndef _MSC_VER
const int BlockInfo::kFileFieldNumber;
const int BlockInfo::kXFieldNumber;
const int BlockInfo::kYFieldNumber;
#endif  // !_MSC_VER

BlockInfo::BlockInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BlockInfo::InitAsDefaultInstance() {
}

BlockInfo::BlockInfo(const BlockInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfo::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfo::~BlockInfo() {
  SharedDtor();
}

void BlockInfo::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void BlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlockInfo& BlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

BlockInfo* BlockInfo::default_instance_ = NULL;

BlockInfo* BlockInfo::New() const {
  return new BlockInfo;
}

void BlockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
}

int BlockInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockInfo*>(&from));
}

void BlockInfo::MergeFrom(const BlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BlockInfo::Swap(BlockInfo* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BlockInfo::GetTypeName() const {
  return "framework.BlockInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SeamlessMap::kBlockRowFieldNumber;
const int SeamlessMap::kBlockColFieldNumber;
const int SeamlessMap::kGridWidthFieldNumber;
const int SeamlessMap::kGridHeightFieldNumber;
const int SeamlessMap::kBlocksFieldNumber;
#endif  // !_MSC_VER

SeamlessMap::SeamlessMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SeamlessMap::InitAsDefaultInstance() {
}

SeamlessMap::SeamlessMap(const SeamlessMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SeamlessMap::SharedCtor() {
  _cached_size_ = 0;
  blockrow_ = 0;
  blockcol_ = 0;
  gridwidth_ = 0;
  gridheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeamlessMap::~SeamlessMap() {
  SharedDtor();
}

void SeamlessMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeamlessMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SeamlessMap& SeamlessMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

SeamlessMap* SeamlessMap::default_instance_ = NULL;

SeamlessMap* SeamlessMap::New() const {
  return new SeamlessMap;
}

void SeamlessMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blockrow_ = 0;
    blockcol_ = 0;
    gridwidth_ = 0;
    gridheight_ = 0;
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SeamlessMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blockRow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockrow_)));
          set_has_blockrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blockCol;
        break;
      }
      
      // required int32 blockCol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blockCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockcol_)));
          set_has_blockcol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridWidth;
        break;
      }
      
      // required int32 gridWidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridwidth_)));
          set_has_gridwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gridHeight;
        break;
      }
      
      // required int32 gridHeight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridheight_)));
          set_has_gridheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blocks;
        break;
      }
      
      // repeated .framework.BlockInfo blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeamlessMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blockRow = 1;
  if (has_blockrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockrow(), output);
  }
  
  // required int32 blockCol = 2;
  if (has_blockcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blockcol(), output);
  }
  
  // required int32 gridWidth = 3;
  if (has_gridwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gridwidth(), output);
  }
  
  // required int32 gridHeight = 4;
  if (has_gridheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gridheight(), output);
  }
  
  // repeated .framework.BlockInfo blocks = 5;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->blocks(i), output);
  }
  
}

int SeamlessMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blockRow = 1;
    if (has_blockrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockrow());
    }
    
    // required int32 blockCol = 2;
    if (has_blockcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockcol());
    }
    
    // required int32 gridWidth = 3;
    if (has_gridwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridwidth());
    }
    
    // required int32 gridHeight = 4;
    if (has_gridheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridheight());
    }
    
  }
  // repeated .framework.BlockInfo blocks = 5;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeamlessMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SeamlessMap*>(&from));
}

void SeamlessMap::MergeFrom(const SeamlessMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blockrow()) {
      set_blockrow(from.blockrow());
    }
    if (from.has_blockcol()) {
      set_blockcol(from.blockcol());
    }
    if (from.has_gridwidth()) {
      set_gridwidth(from.gridwidth());
    }
    if (from.has_gridheight()) {
      set_gridheight(from.gridheight());
    }
  }
}

void SeamlessMap::CopyFrom(const SeamlessMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeamlessMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void SeamlessMap::Swap(SeamlessMap* other) {
  if (other != this) {
    std::swap(blockrow_, other->blockrow_);
    std::swap(blockcol_, other->blockcol_);
    std::swap(gridwidth_, other->gridwidth_);
    std::swap(gridheight_, other->gridheight_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SeamlessMap::GetTypeName() const {
  return "framework.SeamlessMap";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework

// @@protoc_insertion_point(global_scope)
