$#include "Map/TLMapBlock.h"
$#include "Map/TLSeamlessMap.h"

// grid state flag ------------------------------------------------------------------------------------
enum TL_GRID_FLAG
{
	TL_GRID_FLAG_PASS				    = 0x00000001,					// 能否通行
	TL_GRID_FLAG_PLANT				    = 0x00000002,					// 能否种植
    TL_GRID_FLAG_FILL_WATER             = 0x00000003,                   // 能否取水
};

class TLMapBlock : public CCNode
{
    static TLMapBlock* create( const std::string& strFileName );

    void setIsEnablePassByIndex( int nIndex, bool bIsEnable );
    bool getIsEnablePassByIndex( int nIndex ) const ;
    void setIsEnablePass( float x, float y, bool bIsEnable );
    bool getIsEnablePass( float x, float y );

    void setIsEnablePlantByIndex( int nIndex, bool bIsEnable );
    bool getIsEnablePlantByIndex( int nIndex ) const;
    void setIsEnablePlant( float x, float y, bool bIsEnable );
    bool getIsEnablePlant( float x, float y );

    void setIsEnableFillWaterByIndex( int nIndex, bool bIsEnable );
    bool getIsEnableFillWaterByIndex( int nIndex ) const;
    void setIsEnableFillWater( float world_x, float world_y, bool bIsEnable );
    bool getIsEnableFillWater( float world_x, float world_y );

    static bool newMapBlock( const std::string& strMapBlockFile, const std::string& strBlockName, int nRow, int nCol, int nGridWidth, int nGridHeight, const std::string& strMaterial );

    void create( int nRow, int nCol, int nWidth, int nHeight );
    void save();

    void setMaterial( const std::string& strMaterial );

    // sprite
	CCNode* addSprite( const std::string& strFileName, float x, float y );

    // model
	CCNode* addModel( const std::string& strFileName, float x, float y );

	void removeObject( CCNode* pkNode );
	void moveObject( CCNode* pkNode, float mv_x, float mv_y );
	void scaleObject( CCNode* pkNode, float scale );
	void rotateObject( CCNode* pkNode, float rotation );
	CCNode* copyObject( CCNode* pkNode );
	void setObjectOffset( CCNode* pkNode, float offset_x, float offset_y );

    CCNode* hitSprite( float x, float y );
    CCNode* hitModel( float x, float y );

	void setSelectedObject( CCNode* pkSelObj );
};

class TLSeamlessMap : public CCNode
{
    static TLSeamlessMap* create( const std::string& strSeamlessMapFile, float x, float y );

    static TLSeamlessMap* newSeamlessMap( const std::string& strSeamlessMapFile, const std::string& strBlockName, int nBlockRow, int nBlockCol, int nGridWidth, int nGridHeight, const std::string& strMaterial );
	bool save();

    BlockInfo* getBlockInfo( float x, float y );
	TLMapBlock* getMapBlock( float x, float y );

    void setCurXY( float x, float y );
    const std::string& getSeamlessMapFile() const;

    void setIsEnablePass( float world_x, float world_y, bool bIsEnable );
    bool getIsEnablePass( float world_x, float world_y );

    void setIsEnablePlant( float world_x, float world_y, bool bIsEnable );
    bool getIsEnablePlant( float world_x, float world_y );

    void setIsEnableFillWater( float world_x, float world_y, bool bIsEnable );
    bool getIsEnableFillWater( float world_x, float world_y );

    int getBlockRow() const;
    int getBlockCol() const;
    int getGridWidth() const;
    int getGridHeight() const;

    void addBlock( const std::string& strBlockName, float x, float y, const std::string& strMaterial );
    void removeBlock( float x, float y );
};
